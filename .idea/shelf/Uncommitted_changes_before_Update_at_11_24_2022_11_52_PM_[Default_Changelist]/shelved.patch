Index: changeExtension.py
===================================================================
--- changeExtension.py	(revision fa972dcce9c348a11025f12315608470a3bae4d0)
+++ changeExtension.py	(revision fa972dcce9c348a11025f12315608470a3bae4d0)
@@ -1,25 +0,0 @@
-import os
-from pathlib import Path
-
-extensions = ['PNG']
-
-path = os.path.abspath(r"D:/Computing/Python/Chess/Images")
-
-for f in os.listdir(path):
-    p = Path(f)
-    p.rename(p.with_suffix('.jpg'))
-
-self.define_moves()
-        valid = False
-        for i in self.moves:
-            if i[0]+self.pos[0] >= 0 and i[0]+self.pos[0] < 8 and i[1]+self.pos[1] >= 0 and i[1]+self.pos[1] < 8:
-                for j in board:
-                    check_pos = j.get_pos()
-                    if i[0] + self.pos[0] == check_pos[0] and i[1] + self.pos[1] == check_pos[1]:
-                        if j.get_color == None:
-                            self.valid_moves.append([self.pos[0] + i[0], self.pos[1] + i[1]])
-        for i in self.check:
-            for j in board:
-                check_pos = j.get_pos()
-                if i[0]+self.pos[0] == check_pos[0] and i[1]+self.pos[1] == check_pos[1]:
-                    self.valid_moves.append([self.pos[0] + i[0], self.pos[1] + i[1]])
\ No newline at end of file
Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- README.md	(date 1669304501047)
+++ README.md	(date 1669304501047)
@@ -0,0 +1,3 @@
+# Chess
+
+Run using MAIN.py. Requires pygame module
Index: MAIN.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- MAIN.py	(date 1669304501046)
+++ MAIN.py	(date 1669304501046)
@@ -0,0 +1,528 @@
+import pygame
+import math
+import sys
+import warnings
+from copy import deepcopy
+import pygame_menu
+
+warnings.filterwarnings(action='ignore',message="libpng warning: bKGD: invalid")
+
+pygame.init()
+
+WIDTH = 600
+HEIGHT = 600
+
+SQUARE_SIZE = WIDTH / 8
+
+WHITE = (255,255,255)
+BLACK  = (0,0,0)
+
+COLOR = {
+    WHITE: ['WHITE',(255,255,255)],
+    BLACK: ['BLACK',(0,0,0)]
+}
+
+
+class Piece():
+    def __init__(self,color,pos,type, copy):
+        self.color = color
+        self.taken = False
+        self.pos = pos
+        if not copy:
+            self.img = self.get_img()
+            self.rect = self.get_rect()
+        else:
+            self.img = None
+            self.rect = None
+        self.valid_moves = []
+        self.future = type
+
+    def is_taken(self):
+        return self.taken
+
+    def get_pos(self):
+        return self.pos
+
+    def get_color(self):
+        return self.color
+
+    def get_img(self):
+        img = pygame.image.load("Images\\"+str(self.color[0][0]) + str(self.__class__.__name__)+".png")
+        img = pygame.transform.scale(img, (SQUARE_SIZE,SQUARE_SIZE))
+        return img
+
+    def get_rect(self):
+        return pygame.Rect(self.pos[0]*SQUARE_SIZE,self.pos[1]*SQUARE_SIZE,SQUARE_SIZE,SQUARE_SIZE)
+
+    def move_pos(self,new_pos,board):
+        piece = None
+        if new_pos not in self.valid_moves:
+            return False, piece
+        for move in board:
+            if move.get_pos() == new_pos:
+                piece = move
+                board.remove(move)
+        self.pos = new_pos
+        return True, piece
+
+    def make_move_pos(self, new_pos):
+        self.pos = new_pos
+
+    def is_valid(self,new_pos,board):
+        if new_pos not in self.valid_moves:
+            return False
+        else:
+            return True
+
+    def find_valid(self,board):
+        self.valid_moves = []
+        for i in self.moves:
+            copy = self.pos[:]
+            valid = True
+            once = True
+            while i[0] + copy[0] >= 0 and i[0] + copy[0] < 8 and i[1] + copy[1] >= 0 and i[1] + copy[1] < 8 and valid:
+                if valid and not once:
+                    valid = False
+                for j in board:
+                    if [i[0] + copy[0],i[1]+copy[1]] == j.get_pos() and once:
+                        if j.get_color() == self.get_color():
+                            valid = False
+                        else:
+                            valid = True
+                            once = False
+                if valid:
+                    self.valid_moves.append([copy[0] + i[0], copy[1] + i[1]])
+                copy = [copy[0] + i[0], copy[1] + i[1]]
+
+    def get_valid_moves(self):
+        return self.valid_moves
+
+class Pawn(Piece):
+    def __init__(self, color, pos,direction,type, copy = False):
+        super().__init__(color, pos,type, copy)
+        self.direction = direction
+        self.moves = []
+        self.check = []
+        self.valid_moves = []
+        self.moved = False
+
+    def __deepcopy__(self, memodict={}):
+        piece = Pawn(deepcopy(self.color),deepcopy(self.pos),deepcopy(self.direction),deepcopy(self.future),True)
+        piece.moves = deepcopy(self.moves)
+        piece.check = deepcopy(self.check)
+        piece.moved = deepcopy(self.moved)
+        piece.valid_moves = deepcopy(self.valid_moves)
+        return piece
+
+    def define_moves(self):
+        if self.direction == 1:
+            if not self.moved:
+                self.moves = [[0,1],[0,2]]
+            else:
+                self.moves = [[0,1]]
+            self.check = [[1,1],[-1,1]]
+        else:
+            if not self.moved:
+                self.moves = [[0,-1],[0,-2]]
+            else:
+                self.moves = [[0, -1]]
+            self.check = [[-1, -1], [1, -1]]
+
+    def move_pos(self,new_pos,board):
+        dist = self.get_distance(new_pos)
+        piece = None
+        if new_pos not in self.valid_moves:
+            return False, piece
+        for move in board:
+            if move.get_pos() == new_pos:
+                board.remove(move)
+                piece = move
+        self.pos = new_pos
+        return True, piece
+
+    def make_move_pos(self, new_pos):
+        self.pos = new_pos
+
+    def get_distance(self,new_pos):
+        distance = 0
+        if new_pos in self.valid_moves:
+            distance = abs(new_pos[1] - self.pos[1])
+            print(distance)
+            print("!")
+        return distance
+
+    def find_valid(self,board):
+        self.define_moves()
+        valid = True
+        self.valid_moves = []
+        copy = self.pos[:]
+        for i in self.moves:
+            if i[0] + copy[0] >= 0 and i[0] + copy[0] < 8 and i[1] + copy[1] >= 0 and i[1] + copy[
+                1] < 8:
+                for j in board:
+                    check_pos = j.get_pos()
+                    if i[0] + copy[0] == check_pos[0] and i[1] + copy[1] == check_pos[1]:
+                        if self.get_color() == j.get_color():
+                            valid = False
+                if valid:
+                    self.valid_moves.append([copy[0] + i[0], copy[1] + i[1]])
+        for i in self.check:
+            for j in board:
+                check_pos = j.get_pos()
+                if i[0] + self.pos[0] == check_pos[0] and i[1] + self.pos[1] == check_pos[1]:
+                    self.valid_moves.append([self.pos[0] + i[0], self.pos[1] + i[1]])
+
+class Knight(Piece):
+    def __init__(self, color, pos,type, copy=False):
+        super().__init__(color, pos,type, copy)
+        self.moves = [[2, 1], [2, -1], [1, 2], [-1, 2], [1, -2], [-2, 1], [-2, -1], [-1, -2]]
+
+    def __deepcopy__(self, memodict={}):
+        piece = Knight(deepcopy(self.color), deepcopy(self.pos), deepcopy(self.future), True)
+        piece.valid_moves = deepcopy(self.valid_moves)
+        return piece
+
+    def find_valid(self, board):
+        self.valid_moves = []
+        for i in self.moves:
+            copy = self.pos[:]
+            valid = True
+            if i[0] + copy[0] >= 0 and i[0] + copy[0] < 8 and i[1] + copy[1] >= 0 and i[1] + copy[1] < 8 and valid:
+                for j in board:
+                    if [i[0] + copy[0], i[1] + copy[1]] == j.get_pos():
+                        if j.get_color() == self.get_color():
+                            valid = False
+                        else:
+                            valid = True
+                if valid:
+                    self.valid_moves.append([copy[0] + i[0], copy[1] + i[1]])
+
+class Bishop(Piece):
+    def __init__(self, color, pos,type,copy=False):
+        super().__init__(color, pos,type,copy)
+        self.moves = [[1,1],[-1,-1],[1,-1],[-1,1]]
+    def __deepcopy__(self, memodict={}):
+        piece = Bishop(deepcopy(self.color), deepcopy(self.pos), deepcopy(self.future), True)
+        piece.valid_moves = deepcopy(self.valid_moves)
+        return piece
+
+
+class Castle(Piece):
+    def __init__(self, color, pos,type, copy=False):
+        super().__init__(color, pos,type, copy)
+        self.moves = [[0, 1], [0, -1], [1, 0], [-1,0]]
+
+    def __deepcopy__(self, memodict={}):
+        piece = Castle(deepcopy(self.color), deepcopy(self.pos), deepcopy(self.future), True)
+        piece.valid_moves = deepcopy(self.valid_moves)
+        return piece
+
+class Queen(Piece):
+    def __init__(self, color, pos,type, copy=False):
+        super().__init__(color, pos,type, copy)
+        self.moves = [[0,1],[1,0],[1,1],[0,-1],[-1,0],[-1,-1],[-1,1],[1,-1]]
+
+    def __deepcopy__(self, memodict={}):
+        piece = Queen(deepcopy(self.color), deepcopy(self.pos), deepcopy(self.future), True)
+        piece.valid_moves = deepcopy(self.valid_moves)
+        return piece
+
+class King(Piece):
+    def __init__(self, color, pos,type, copy=False):
+        super().__init__(color, pos,type, copy)
+        self.moves = [[0,1],[1,0],[1,1],[0,-1],[-1,0],[-1,-1],[-1,1],[1,-1]]
+        self.check = False
+
+    def __deepcopy__(self, memodict={}):
+        piece = King(deepcopy(self.color), deepcopy(self.pos), deepcopy(self.future), True)
+        piece.valid_moves = deepcopy(self.valid_moves)
+        piece.check = deepcopy(self.check)
+        return piece
+
+    def find_valid(self,board):
+        copy = self.pos[:]
+        self.valid_moves = []
+        for i in self.moves:
+            valid = True
+            if i[0] + copy[0] >= 0 and i[0] + copy[0] < 8 and i[1] + copy[1] >= 0 and i[1] + copy[
+                1] < 8:
+                for j in board:
+                    check_pos = j.get_pos()
+                    if i[0] + copy[0] == check_pos[0] and i[1] + copy[1] == check_pos[1]:
+                        valid = False
+                if valid:
+                    self.valid_moves.append([copy[0] + i[0], copy[1] + i[1]])
+        return self.valid_moves
+
+    def check_check(self,board):
+        for i in board:
+            if self.pos in i.valid_moves:
+                self.check = True
+                break
+            else:
+                self.check = False
+
+    def get_check(self):
+        return self.check
+
+class Board():
+    def __init__(self,user,computer,type, pieces=None):
+        self.pieces = []
+        self.user = user
+        self.computer = computer
+        if (pieces == None):
+            self.set_pieces(type)
+        else:
+            self.pieces = pieces
+        self.in_check = {
+            "WHITE": False,
+            "BLACK": False
+        }
+
+    def set_pieces(self,type):
+        self.pieces = [Castle(self.user,[0,0],type),Knight(self.user,[1,0],type),Bishop(self.user,[2,0],type),Queen(self.user,[3,0],type),King(self.user,[4,0],type),Bishop(self.user,[5,0],type),Knight(self.user,[6,0],type),Castle(self.user,[7,0],type),
+                       Pawn(self.user,[0,1],1,type),Pawn(self.user,[1,1],1,type),Pawn(self.user,[2,1],1,type),Pawn(self.user,[3,1],1,type),Pawn(self.user,[4,1],1,type),Pawn(self.user,[5,1],1,type),Pawn(self.user,[6,1],1,type),Pawn(self.user,[7,1],1,type),
+                       Pawn(self.computer,[0,6],-1,type),Pawn(self.computer,[1,6],-1,type),Pawn(self.computer,[2,6],-1,type),Pawn(self.computer,[3,6],-1,type),Pawn(self.computer,[4,6],-1,type),Pawn(self.computer,[5,6],-1,type),Pawn(self.computer,[6,6],-1,type),Pawn(self.computer,[7,6],-1,type),
+                       Castle(self.computer,[0,7],type),Knight(self.computer,[1,7],type),Bishop(self.computer,[2,7],type),Queen(self.computer,[5,5],type),King(self.computer,[4,7],type),Bishop(self.computer,[2,4],type),Knight(self.computer,[6,7],type),Castle(self.computer,[7,7],type)]
+
+    def get_pieces(self):
+        return self.pieces
+
+    def init_valid(self,color, basic=False):
+        print("Valid")
+        for i in self.pieces:
+            s = i.find_valid(self.pieces)
+        if not basic:
+            self.validate_check(color)
+        print("Vals: ",[(i, i.pos, i.valid_moves) for i in self.pieces])
+        #print(i.__class__.__name__, i.get_color(), i.get_pos(), i.valid_moves)
+
+    def validate_check(self,color):
+        original_board = deepcopy(self)
+        copy_board = deepcopy(self)
+        pieces = copy_board.pieces[:]
+        for piece in pieces:
+            if piece.color[0] == color:
+                valid_moves = deepcopy(piece.valid_moves)
+                print(piece, piece.pos,valid_moves)
+                for move in valid_moves:
+                    original_pos = deepcopy(piece.pos)
+                    moved, removed_piece = copy_board.move_piece(piece.pos, move)
+                    if (piece.__class__.__name__ == "Bishop"):
+                        print("Here")
+                    if removed_piece:
+                        print("Here2")
+                    #copy_board.init_valid(color, True)
+                    future_check = copy_board.get_set_check(color)
+                    copy_board.reverse_move(move, original_pos, removed_piece)
+                    if future_check:
+                        for i in self.pieces:
+
+                            if i.__class__.__name__ == piece.__class__.__name__ and i.color == piece.color:
+                                if (move in i.valid_moves):
+                                    i.valid_moves.remove(move)
+                                    print("Remove: ", i, i.pos, move, i.valid_moves)
+                        #piece.valid_moves.remove(move)
+                print(piece, piece.pos, valid_moves)
+
+    def get_valid_for_pos(self,pos):
+        for i in self.pieces:
+            if i.get_pos() == pos:
+                return i.valid_moves
+
+    def get_valid(self,pos,new_pos,user):
+        for i in self.pieces:
+            if i.get_pos() == pos:
+                if i.is_valid(new_pos,self.pieces):
+                    return True
+                else:
+                    return False
+
+    def get_piece_from_pos(self,pos):
+        for i in self.pieces:
+            if i.get_pos == pos:
+                return i
+        return None
+
+    def move_piece(self,pos,new_pos,real=False):
+        moved = False
+        piece = None
+        for i in self.pieces:
+            if i.get_pos() == pos:
+                if (new_pos != pos):
+                    moved, piece = i.move_pos(new_pos,self.get_pieces())
+            elif i.get_pos() == new_pos and real:
+                i.moved = True
+            #print(i.__class__.__name__, i.get_color(), i.get_pos(), i.valid_moves)
+        return moved, piece
+
+    def reverse_move(self, new_pos, pos, piece):
+        for i in self.pieces:
+            if i.get_pos() == new_pos:
+                if (new_pos != pos):
+                    i.make_move_pos(pos)
+                    if piece:
+                        self.pieces.append(piece)
+                    break
+
+    def get_selected(self,pos):
+        for i in self.pieces:
+            if i.get_pos() == pos:
+                return i
+
+    def set_check(self):
+        for x in self.pieces:
+            color = x.get_color()[0]
+            if x.__class__.__name__ == "King":
+                x.check_check(self.pieces)
+                if color == 'WHITE':
+                    self.in_check['WHITE'] = x.get_check()
+                else:
+                    self.in_check['BLACK'] = x.get_check()
+
+    def get_set_check(self,color):
+        self.set_check()
+        print("check:",self.in_check)
+        print(color)
+        print(self.in_check[color])
+        return self.in_check[color]
+
+    def get_check(self,color):
+        return self.in_check[color]
+
+    # No Mate - 0, Stalemate - 1, Checkmate - 2
+    def check_mates(self,color):
+        for i in self.pieces:
+            if i.color[0] == color:
+                if len(i.valid_moves) > 0:
+                    return 0
+        if self.in_check[color]:
+            return 2
+        else:
+            return 1
+
+
+
+class Game():
+    def __init__(self):
+        pygame.init()
+        pygame.font.init()
+        self.font = pygame.font.SysFont('Comic Sans MS',30)
+        self.user,self.computer = self.get_user()
+        self.turn = COLOR[WHITE]
+        self.board = Board(self.user,self.computer,False)
+        self.future_board = deepcopy(self.board)
+        self.screen =  pygame.display.set_mode((WIDTH,HEIGHT))
+        self.time = pygame.time.Clock()
+        self.selected = None
+        self.valid_moves = None
+        self.in_check = None
+        self.game_state = 0
+
+    def drawWindow(self):
+        self.screen.fill(WHITE)
+        pieces = self.board.get_pieces()
+        for i in range(8):
+            for j in range(8):
+                if i % 2 == 0 and j % 2 == 0 or i % 2 == 1 and j % 2 ==1:
+                    pygame.draw.rect(self.screen,(153, 102, 51),(i*SQUARE_SIZE,j*SQUARE_SIZE,SQUARE_SIZE,SQUARE_SIZE))
+                else:
+                    pygame.draw.rect(self.screen, (255, 204, 153), (i * SQUARE_SIZE, j * SQUARE_SIZE, SQUARE_SIZE, SQUARE_SIZE))
+
+        if self.selected != None:
+            pygame.draw.rect(self.screen,(255,0,0),(self.selected[0]*SQUARE_SIZE,self.selected[1]*SQUARE_SIZE,SQUARE_SIZE,SQUARE_SIZE),2)
+        if self.valid_moves != None:
+            for move in self.valid_moves:
+                pygame.draw.rect(self.screen, (0, 255, 0), (move[0] * SQUARE_SIZE, move[1] * SQUARE_SIZE, SQUARE_SIZE, SQUARE_SIZE), 2)
+        if self.in_check != None:
+            pygame.draw.rect(self.screen, (255, 0, 0), (self.in_check[0] * SQUARE_SIZE, self.in_check[1] * SQUARE_SIZE, SQUARE_SIZE, SQUARE_SIZE), 2)
+        for i in pieces:
+            self.screen.blit(i.get_img(), i.get_rect())
+            if (isinstance(i, King)):
+                if (i.check):
+                    pygame.draw.rect(self.screen, (255, 0, 0), i.get_rect(), 2)
+
+
+        text_surface = self.font.render(self.turn[0], False, (0, 0, 0))
+        self.screen.blit(text_surface,(400,0))
+
+        if (self.game_state == 1):
+            text_surface = self.font.render("Stalemate", False, (0, 0, 0))
+            self.screen.blit(text_surface, (400, 200))
+        if (self.game_state == 2):
+            text_surface = self.font.render(str("Checkmate. " + self.turn[0] + " wins"), False, (0, 0, 0))
+            self.screen.blit(text_surface, (400, 200))
+
+        pygame.display.update()
+
+
+    def get_user(self):
+        return COLOR[BLACK],COLOR[WHITE]
+
+    def switch_turn(self):
+        if self.turn == COLOR[WHITE]:
+            self.turn = COLOR[BLACK]
+        else:
+            self.turn = COLOR[WHITE]
+
+    def get_turn(self):
+        return self.turn
+
+    def move_piece(self):
+        pass
+
+    def get_cord(self,pos):
+        cord = [0] * 2
+        for i in range(len(pos)):
+            cord[i] = math.floor(pos[i]/SQUARE_SIZE)
+        return cord
+
+    def main(self):
+        self.drawWindow()
+        selected = False
+        self.board.init_valid(self.get_turn()[0])
+        self.future_board.init_valid(self.get_turn()[0], True)
+        while True:
+            for event in pygame.event.get():
+                if event.type == pygame.QUIT:
+                    pygame.quit()
+                    sys.exit()
+                if event.type == pygame.MOUSEBUTTONDOWN:
+                    pos = pygame.mouse.get_pos()
+                    self.board.init_valid(self.get_turn()[0])
+                    self.future_board.init_valid(self.get_turn()[0], True)
+                    if not selected:
+                        cord = self.get_cord(pos)
+                        select = self.board.get_selected(cord)
+                        print(select)
+                        if select != None and select.color == self.turn:
+                            self.selected = cord
+                            self.valid_moves = self.board.get_valid_for_pos(cord)
+                            print("Valid Moves: ",self.valid_moves)
+                            selected = True
+                    else:
+                        new_cord = self.get_cord(pos)
+                        moved, piece = self.future_board.move_piece(cord,new_cord)
+                        future_check = self.future_board.get_set_check(self.get_turn()[0])
+                        print("Prior future check: ", future_check)
+                        if self.board.get_valid(cord,new_cord,self.get_turn()[0]) and not future_check and moved:
+                            self.board.move_piece(cord,new_cord,real=True)
+                            #print("Future Check: ", self.future_board.get_set_check(self.get_turn()[1]))
+                            self.board.init_valid(self.get_turn()[0], True)
+                            self.switch_turn()
+                            self.board.init_valid(self.get_turn()[0], False)
+                            print("Future Check: ", self.board.get_set_check(self.get_turn()[0]))
+                            self.game_state = self.board.check_mates(self.get_turn()[0])
+                        selected = False
+                        self.selected = None
+                        self.valid_moves = None
+                    self.future_board.pieces = deepcopy(self.board.pieces)
+                    self.drawWindow()
+            self.time.tick(60)
+        self.drawWindow()
+
+
+
+if __name__ == "__main__":
+    Game().main()
+
Index: .idea/csv-plugin.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"CsvFileAttributes\">\r\n    <option name=\"attributeMap\">\r\n      <map>\r\n        <entry key=\"\\Game.py\">\r\n          <value>\r\n            <Attribute>\r\n              <option name=\"separator\" value=\",\" />\r\n            </Attribute>\r\n          </value>\r\n        </entry>\r\n        <entry key=\"\\MAIN.py\">\r\n          <value>\r\n            <Attribute>\r\n              <option name=\"separator\" value=\",\" />\r\n            </Attribute>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/csv-plugin.xml	(revision fa972dcce9c348a11025f12315608470a3bae4d0)
+++ .idea/csv-plugin.xml	(date 1669305073330)
@@ -17,6 +17,13 @@
             </Attribute>
           </value>
         </entry>
+        <entry key="\RestartMenu.py">
+          <value>
+            <Attribute>
+              <option name="separator" value="," />
+            </Attribute>
+          </value>
+        </entry>
       </map>
     </option>
   </component>
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"BranchesTreeState\">\r\n    <expand>\r\n      <path>\r\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"LOCAL_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n      </path>\r\n    </expand>\r\n    <select />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"fc197401-544a-426e-bf28-fdedf4ac887f\" name=\"Default Changelist\" comment=\"Fixed checkmate, stalemate functionality\">\r\n      <change afterPath=\"$PROJECT_DIR$/Controller.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/RestartMenu.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/StartMenu.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/csv-plugin.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/csv-plugin.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/vcs.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/vcs.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MAIN.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Game.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"1it8o2CyYeF9xtp97fdIZjLYB4A\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"ASKED_ADD_EXTERNAL_FILES\" value=\"true\" />\r\n    <property name=\"ASKED_SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$\" />\r\n    <property name=\"restartRequiresConfirmation\" value=\"false\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"project.propVCSSupport.Mappings\" />\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Python.Controller\">\r\n    <configuration name=\"Controller\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Chess\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"C:\\Users\\leish\\Projects\\(9-9-2020)\\Python\\BettingBot\\venv\\Scripts\\python.exe\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/Controller.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Game\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Chess\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"C:\\Users\\leish\\Projects\\(9-9-2020)\\Python\\BettingBot\\venv\\Scripts\\python.exe\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"C:\\Users\\leish\\Projects\\Python\\Chess\\Game.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"MAIN\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Chess\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"C:\\Users\\leish\\Projects\\(9-9-2020)\\Python\\BettingBot\\venv\\Scripts\\python.exe\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"C:\\Users\\leish\\Projects\\Python\\Chess\\MAIN.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Main\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"Chess\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"C:\\Users\\leish\\Projects\\(9-9-2020)\\Python\\BettingBot\\venv\\Scripts\\python.exe\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/Main.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"PythonConfigurationType\" factoryName=\"Python\">\r\n      <module name=\"Chess\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"C:\\Users\\leish\\Projects\\(9-9-2020)\\Python\\BettingBot\\venv\\Scripts\\python.exe\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/Main.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.Controller\" />\r\n        <item itemvalue=\"Python.Game\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"fc197401-544a-426e-bf28-fdedf4ac887f\" name=\"Default Changelist\" comment=\"\" />\r\n      <created>1602715698898</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1602715698898</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Fixed checkmate, stalemate functionality\">\r\n      <created>1665551046902</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1665551046902</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"2\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <ignored-roots>\r\n      <path value=\"$PROJECT_DIR$/..\" />\r\n    </ignored-roots>\r\n    <MESSAGE value=\"Fixed checkmate, stalemate functionality\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Fixed checkmate, stalemate functionality\" />\r\n  </component>\r\n  <component name=\"WindowStateProjectService\">\r\n    <state x=\"722\" y=\"90\" width=\"483\" height=\"491\" key=\"#xdebugger.XInspectDialog\" timestamp=\"1665503699428\">\r\n      <screen x=\"0\" y=\"0\" width=\"1280\" height=\"672\" />\r\n    </state>\r\n    <state x=\"722\" y=\"90\" width=\"483\" height=\"491\" key=\"#xdebugger.XInspectDialog/0.0.1280.672/1920.0.1920.1032@1920.0.1920.1032\" timestamp=\"1665503699428\" />\r\n    <state x=\"421\" y=\"92\" key=\"FileChooserDialogImpl\" timestamp=\"1665808673691\">\r\n      <screen x=\"0\" y=\"0\" width=\"1280\" height=\"672\" />\r\n    </state>\r\n    <state x=\"421\" y=\"92\" key=\"FileChooserDialogImpl/0.0.1280.672@0.0.1280.672\" timestamp=\"1665808673691\" />\r\n    <state width=\"375\" height=\"545\" key=\"GridCell.Tab.0.bottom\" timestamp=\"1669178516306\">\r\n      <screen x=\"0\" y=\"0\" width=\"1280\" height=\"672\" />\r\n    </state>\r\n    <state width=\"949\" height=\"421\" key=\"GridCell.Tab.0.bottom/0.0.1280.672/1920.0.1920.1032@1920.0.1920.1032\" timestamp=\"1665503688642\" />\r\n    <state width=\"375\" height=\"545\" key=\"GridCell.Tab.0.bottom/0.0.1280.672@0.0.1280.672\" timestamp=\"1669178516306\" />\r\n    <state width=\"375\" height=\"545\" key=\"GridCell.Tab.0.center\" timestamp=\"1669178516306\">\r\n      <screen x=\"0\" y=\"0\" width=\"1280\" height=\"672\" />\r\n    </state>\r\n    <state width=\"949\" height=\"421\" key=\"GridCell.Tab.0.center/0.0.1280.672/1920.0.1920.1032@1920.0.1920.1032\" timestamp=\"1665503688642\" />\r\n    <state width=\"375\" height=\"545\" key=\"GridCell.Tab.0.center/0.0.1280.672@0.0.1280.672\" timestamp=\"1669178516306\" />\r\n    <state width=\"375\" height=\"545\" key=\"GridCell.Tab.0.left\" timestamp=\"1669178516306\">\r\n      <screen x=\"0\" y=\"0\" width=\"1280\" height=\"672\" />\r\n    </state>\r\n    <state width=\"949\" height=\"421\" key=\"GridCell.Tab.0.left/0.0.1280.672/1920.0.1920.1032@1920.0.1920.1032\" timestamp=\"1665503688642\" />\r\n    <state width=\"375\" height=\"545\" key=\"GridCell.Tab.0.left/0.0.1280.672@0.0.1280.672\" timestamp=\"1669178516306\" />\r\n    <state width=\"375\" height=\"545\" key=\"GridCell.Tab.0.right\" timestamp=\"1669178516306\">\r\n      <screen x=\"0\" y=\"0\" width=\"1280\" height=\"672\" />\r\n    </state>\r\n    <state width=\"949\" height=\"421\" key=\"GridCell.Tab.0.right/0.0.1280.672/1920.0.1920.1032@1920.0.1920.1032\" timestamp=\"1665503688642\" />\r\n    <state width=\"375\" height=\"545\" key=\"GridCell.Tab.0.right/0.0.1280.672@0.0.1280.672\" timestamp=\"1669178516306\" />\r\n    <state width=\"338\" height=\"545\" key=\"GridCell.Tab.1.bottom\" timestamp=\"1669177862414\">\r\n      <screen x=\"0\" y=\"0\" width=\"1280\" height=\"672\" />\r\n    </state>\r\n    <state width=\"949\" height=\"320\" key=\"GridCell.Tab.1.bottom/0.0.1280.672/1920.0.1920.1032@1920.0.1920.1032\" timestamp=\"1665503408351\" />\r\n    <state width=\"338\" height=\"545\" key=\"GridCell.Tab.1.bottom/0.0.1280.672@0.0.1280.672\" timestamp=\"1669177862414\" />\r\n    <state width=\"338\" height=\"545\" key=\"GridCell.Tab.1.center\" timestamp=\"1669177862412\">\r\n      <screen x=\"0\" y=\"0\" width=\"1280\" height=\"672\" />\r\n    </state>\r\n    <state width=\"949\" height=\"320\" key=\"GridCell.Tab.1.center/0.0.1280.672/1920.0.1920.1032@1920.0.1920.1032\" timestamp=\"1665503408351\" />\r\n    <state width=\"338\" height=\"545\" key=\"GridCell.Tab.1.center/0.0.1280.672@0.0.1280.672\" timestamp=\"1669177862412\" />\r\n    <state width=\"338\" height=\"545\" key=\"GridCell.Tab.1.left\" timestamp=\"1669177862412\">\r\n      <screen x=\"0\" y=\"0\" width=\"1280\" height=\"672\" />\r\n    </state>\r\n    <state width=\"949\" height=\"320\" key=\"GridCell.Tab.1.left/0.0.1280.672/1920.0.1920.1032@1920.0.1920.1032\" timestamp=\"1665503408351\" />\r\n    <state width=\"338\" height=\"545\" key=\"GridCell.Tab.1.left/0.0.1280.672@0.0.1280.672\" timestamp=\"1669177862412\" />\r\n    <state width=\"338\" height=\"545\" key=\"GridCell.Tab.1.right\" timestamp=\"1669177862414\">\r\n      <screen x=\"0\" y=\"0\" width=\"1280\" height=\"672\" />\r\n    </state>\r\n    <state width=\"949\" height=\"320\" key=\"GridCell.Tab.1.right/0.0.1280.672/1920.0.1920.1032@1920.0.1920.1032\" timestamp=\"1665503408351\" />\r\n    <state width=\"338\" height=\"545\" key=\"GridCell.Tab.1.right/0.0.1280.672@0.0.1280.672\" timestamp=\"1669177862414\" />\r\n    <state x=\"142\" y=\"0\" key=\"SettingsEditor\" timestamp=\"1669176919882\">\r\n      <screen x=\"0\" y=\"0\" width=\"1280\" height=\"672\" />\r\n    </state>\r\n    <state x=\"142\" y=\"0\" key=\"SettingsEditor/0.0.1280.672@0.0.1280.672\" timestamp=\"1669176919882\" />\r\n    <state x=\"233\" y=\"70\" key=\"Vcs.Push.Dialog.v2\" timestamp=\"1665551054234\">\r\n      <screen x=\"0\" y=\"0\" width=\"1280\" height=\"672\" />\r\n    </state>\r\n    <state x=\"233\" y=\"70\" key=\"Vcs.Push.Dialog.v2/0.0.1280.672@0.0.1280.672\" timestamp=\"1665551054234\" />\r\n    <state x=\"2675\" y=\"250\" key=\"com.intellij.openapi.vcs.changes.SpecificFilesViewDialog\" timestamp=\"1665503439235\">\r\n      <screen x=\"1920\" y=\"0\" width=\"1920\" height=\"1032\" />\r\n    </state>\r\n    <state x=\"2675\" y=\"250\" key=\"com.intellij.openapi.vcs.changes.SpecificFilesViewDialog/0.0.1280.672/1920.0.1920.1032@1920.0.1920.1032\" timestamp=\"1665503439235\" />\r\n    <state x=\"458\" y=\"251\" key=\"com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2\" timestamp=\"1665551098744\">\r\n      <screen x=\"0\" y=\"0\" width=\"1280\" height=\"672\" />\r\n    </state>\r\n    <state x=\"458\" y=\"251\" key=\"com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2/0.0.1280.672@0.0.1280.672\" timestamp=\"1665551098744\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/Game.py</url>\r\n          <line>616</line>\r\n          <option name=\"timeStamp\" value=\"4\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n    <watches-manager>\r\n      <configuration name=\"PythonConfigurationType\">\r\n        <watch expression=\"self\" />\r\n      </configuration>\r\n    </watches-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/workspace.xml	(revision fa972dcce9c348a11025f12315608470a3bae4d0)
+++ .idea/workspace.xml	(date 1669304971332)
@@ -10,14 +10,15 @@
     <select />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="fc197401-544a-426e-bf28-fdedf4ac887f" name="Default Changelist" comment="Fixed checkmate, stalemate functionality">
-      <change afterPath="$PROJECT_DIR$/Controller.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/RestartMenu.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/StartMenu.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/csv-plugin.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/csv-plugin.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/vcs.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/vcs.xml" afterDir="false" />
+    <list default="true" id="fc197401-544a-426e-bf28-fdedf4ac887f" name="Default Changelist" comment="svg files add">
+      <change afterPath="$PROJECT_DIR$/MAIN.py" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/README.md" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/MAIN.py" beforeDir="false" afterPath="$PROJECT_DIR$/Game.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Controller.py" beforeDir="false" afterPath="$PROJECT_DIR$/Controller.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Game.py" beforeDir="false" afterPath="$PROJECT_DIR$/Game.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/RestartMenu.py" beforeDir="false" afterPath="$PROJECT_DIR$/RestartMenu.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/StartMenu.py" beforeDir="false" afterPath="$PROJECT_DIR$/StartMenu.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/changeExtension.py" beforeDir="false" afterPath="$PROJECT_DIR$/changeExtension.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -177,7 +178,21 @@
       <option name="project" value="LOCAL" />
       <updated>1665551046902</updated>
     </task>
-    <option name="localTasksCounter" value="2" />
+    <task id="LOCAL-00002" summary="fixed issues">
+      <created>1669303764022</created>
+      <option name="number" value="00002" />
+      <option name="presentableId" value="LOCAL-00002" />
+      <option name="project" value="LOCAL" />
+      <updated>1669303764023</updated>
+    </task>
+    <task id="LOCAL-00003" summary="svg files add">
+      <created>1669303796609</created>
+      <option name="number" value="00003" />
+      <option name="presentableId" value="LOCAL-00003" />
+      <option name="project" value="LOCAL" />
+      <updated>1669303796609</updated>
+    </task>
+    <option name="localTasksCounter" value="4" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -197,7 +212,9 @@
       <path value="$PROJECT_DIR$/.." />
     </ignored-roots>
     <MESSAGE value="Fixed checkmate, stalemate functionality" />
-    <option name="LAST_COMMIT_MESSAGE" value="Fixed checkmate, stalemate functionality" />
+    <MESSAGE value="fixed issues" />
+    <MESSAGE value="svg files add" />
+    <option name="LAST_COMMIT_MESSAGE" value="svg files add" />
   </component>
   <component name="WindowStateProjectService">
     <state x="722" y="90" width="483" height="491" key="#xdebugger.XInspectDialog" timestamp="1665503699428">
@@ -252,29 +269,22 @@
       <screen x="0" y="0" width="1280" height="672" />
     </state>
     <state x="142" y="0" key="SettingsEditor/0.0.1280.672@0.0.1280.672" timestamp="1669176919882" />
-    <state x="233" y="70" key="Vcs.Push.Dialog.v2" timestamp="1665551054234">
+    <state x="233" y="70" key="Vcs.Push.Dialog.v2" timestamp="1669304117835">
       <screen x="0" y="0" width="1280" height="672" />
     </state>
+    <state x="233" y="70" key="Vcs.Push.Dialog.v2/0.0.1280.672/1920.0.1920.1032@0.0.1280.672" timestamp="1669304117835" />
     <state x="233" y="70" key="Vcs.Push.Dialog.v2/0.0.1280.672@0.0.1280.672" timestamp="1665551054234" />
     <state x="2675" y="250" key="com.intellij.openapi.vcs.changes.SpecificFilesViewDialog" timestamp="1665503439235">
       <screen x="1920" y="0" width="1920" height="1032" />
     </state>
     <state x="2675" y="250" key="com.intellij.openapi.vcs.changes.SpecificFilesViewDialog/0.0.1280.672/1920.0.1920.1032@1920.0.1920.1032" timestamp="1665503439235" />
-    <state x="458" y="251" key="com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2" timestamp="1665551098744">
+    <state x="458" y="251" key="com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2" timestamp="1669304128870">
       <screen x="0" y="0" width="1280" height="672" />
     </state>
+    <state x="458" y="251" key="com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2/0.0.1280.672/1920.0.1920.1032@0.0.1280.672" timestamp="1669304128870" />
     <state x="458" y="251" key="com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2/0.0.1280.672@0.0.1280.672" timestamp="1665551098744" />
   </component>
   <component name="XDebuggerManager">
-    <breakpoint-manager>
-      <breakpoints>
-        <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
-          <url>file://$PROJECT_DIR$/Game.py</url>
-          <line>616</line>
-          <option name="timeStamp" value="4" />
-        </line-breakpoint>
-      </breakpoints>
-    </breakpoint-manager>
     <watches-manager>
       <configuration name="PythonConfigurationType">
         <watch expression="self" />
